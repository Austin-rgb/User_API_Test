{"ast":null,"code":"// src/api.js\n\nimport axios from 'axios';\n\n// Set the base URL for your API requests\nconst API_BASE_URL = 'http://localhost:8000/api';\n\n// Function to handle user signup\nexport const signupUser = async userData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/signup/`, userData);\n    return response.data;\n  } catch (error) {\n    console.error('Error during signup:', error);\n    throw error;\n  }\n};\n\n// Function to handle user login\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/login/`, credentials);\n    return response.data;\n  } catch (error) {\n    console.error('Error during login:', error);\n    throw error;\n  }\n};\n\n// Function to handle forgot password\nexport const forgotPassword = async email => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/forgot-password/`, {\n      email\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error during forgot password:', error);\n    throw error;\n  }\n};\n\n// Function to handle password reset\nexport const resetPassword = async (otp, newPassword) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/reset-password/`, {\n      otp,\n      newPassword\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error during reset password:', error);\n    throw error;\n  }\n};\n\n// Function to handle profile update\nexport const updateProfile = async userData => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/profile-update/`, userData);\n    return response.data;\n  } catch (error) {\n    console.error('Error during profile update:', error);\n    throw error;\n  }\n};\nexport const fetchProfile = profileId => {\n  if (!profileId) {\n    throw new Error('profileId is required');\n  }\n  return fetch(`http://localhost:8000/api/profile/${profileId}/`).then(response => response.json()).catch(error => console.error('Error:', error));\n};\n\n// export const fetchProfile = async () => {\n//     const token = localStorage.getItem('authToken'); // Ensure token key is consistent\n//     if (!token) {\n//       throw new Error('No token found');\n//     }\n\n//     try {\n//       const response = await axios.get(`${API_BASE_URL}/profile/${profileId}`, {\n//         headers: {\n//           'Authorization': `Bearer ${token}`,\n//         },\n//       });\n//       return response.data;\n//     } catch (error) {\n//       console.error('Error during fetch profile:', error.response ? error.response.data : error.message);\n//       throw error;\n//     }\n//   };","map":{"version":3,"names":["axios","API_BASE_URL","signupUser","userData","response","post","data","error","console","loginUser","credentials","forgotPassword","email","resetPassword","otp","newPassword","updateProfile","put","fetchProfile","profileId","Error","fetch","then","json","catch"],"sources":["D:/API/APIproject/frontend/src/services/api.js"],"sourcesContent":["// src/api.js\r\n\r\nimport axios from 'axios';\r\n\r\n// Set the base URL for your API requests\r\nconst API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n// Function to handle user signup\r\nexport const signupUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/signup/`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error during signup:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to handle user login\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/login/`, credentials);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error during login:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to handle forgot password\r\nexport const forgotPassword = async (email) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/forgot-password/`, { email });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error during forgot password:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to handle password reset\r\nexport const resetPassword = async (otp, newPassword) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/reset-password/`, { otp, newPassword });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error during reset password:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n// Function to handle profile update\r\nexport const updateProfile = async (userData) => {\r\n  try {\r\n    const response = await axios.put(`${API_BASE_URL}/profile-update/`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error during profile update:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchProfile = (profileId) => {\r\n    if (!profileId) {\r\n      throw new Error('profileId is required');\r\n    }\r\n    \r\n    return fetch(`http://localhost:8000/api/profile/${profileId}/`)\r\n      .then(response => response.json())\r\n      .catch(error => console.error('Error:', error));\r\n  };\r\n\r\n// export const fetchProfile = async () => {\r\n//     const token = localStorage.getItem('authToken'); // Ensure token key is consistent\r\n//     if (!token) {\r\n//       throw new Error('No token found');\r\n//     }\r\n  \r\n//     try {\r\n//       const response = await axios.get(`${API_BASE_URL}/profile/${profileId}`, {\r\n//         headers: {\r\n//           'Authorization': `Bearer ${token}`,\r\n//         },\r\n//       });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       console.error('Error during fetch profile:', error.response ? error.response.data : error.message);\r\n//       throw error;\r\n//     }\r\n//   };\r\n  \r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,UAAU,EAAEE,QAAQ,CAAC;IACtE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,SAAS,EAAES,WAAW,CAAC;IACxE,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,cAAc,GAAG,MAAOC,KAAK,IAAK;EAC7C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,mBAAmB,EAAE;MAAEW;IAAM,CAAC,CAAC;IAChF,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,aAAa,GAAG,MAAAA,CAAOC,GAAG,EAAEC,WAAW,KAAK;EACvD,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,kBAAkB,EAAE;MAAEa,GAAG;MAAEC;IAAY,CAAC,CAAC;IAC1F,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAKD;AACA,OAAO,MAAMS,aAAa,GAAG,MAAOb,QAAQ,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACiB,GAAG,CAAC,GAAGhB,YAAY,kBAAkB,EAAEE,QAAQ,CAAC;IAC7E,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMW,YAAY,GAAIC,SAAS,IAAK;EACvC,IAAI,CAACA,SAAS,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EAEA,OAAOC,KAAK,CAAC,qCAAqCF,SAAS,GAAG,CAAC,CAC5DG,IAAI,CAAClB,QAAQ,IAAIA,QAAQ,CAACmB,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACjB,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;AACnD,CAAC;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}